# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

platform :ios do

  desc "Run test"
  lane :test do
    scan(
      scheme: 'PAYJP',
      device: 'iPhone Xs Max',
      configuration: 'Debug',
      skip_slack: true
    )
  end

  desc "Lint podspec"
  lane :lint_podspec do
    sh('pod lib lint ../PAYJP.podspec')
    pod_version = version_get_podspec(path: 'PAYJP.podspec')
    info_version = get_version_number
    unless pod_version == info_version then
      UI.user_error! "Version mismatch between podspec (#{pod_version}) and info.plist (#{info_version})."
    end
  end

  desc "Bump up next version"
  lane :bump_up_version do |options|
    current = get_version_number
    new_version = options[:version] || prompt(text: "next version(current is #{current}):")
    increment_version_number(version_number: new_version)
    version_bump_podspec(
      path: "PAYJP.podspec",
      version_number: new_version
    )
  end
  
  desc "Create GitHub PR to `payjp/payjp-ios` from internal repo. (internal only)"
  lane :create_pr_to_public do
    public_repo = 'payjp/payjp-ios'
    last_commit_hash = last_git_commit[:abbreviated_commit_hash]
    new_branch = "internal/#{last_commit_hash}"

    sh("git checkout -b #{new_branch}")
    sh("git remote add public git@github.com:payjp/payjp-ios.git")
    push_to_git_remote(
      remote: 'public',
      remote_branch: new_branch
    )

    pr_url = create_pull_request(
      repo: public_repo,
      base: 'master',
      title: "internal update:#{last_commit_hash}",
      api_token: ENV['GITHUB_API_TOKEN']
    )

    slack(
      message: ":rocket: PR is created! Please fill in the blank PR description:information_desk_person:\n#{pr_url}",
      success: true
    )
  end

  desc "Check Swift format with swiftLint"
  lane :check_swift_format do
    sh('../scripts/run-swift-format.sh')
    modified_files = sh('git status --porcelain').split
    unless modified_files.empty?
      UI.user_error! "Some diffs have generated after Swift format."
    end
  end

  desc "Check Objective-C format with clang-format"
  lane :check_objc_format do
    sh('../scripts/run-clang-format.sh')
    modified_files = sh('git status --porcelain').split
    unless modified_files.empty?
      UI.user_error! "Some diffs have generated after Objective-C format."
    end
  end

  desc "Create PR to update docs"
  lane :create_pr_to_update_docs do
    target_branch = 'develop'
    diff_files = sh("git diff HEAD..origin/#{target_branch} --name-only").split
    unless diff_files.any? { |file| file.start_with? "Sources/" }
      UI.message "No updates in sources."
    else
      last_commit_hash = last_git_commit[:abbreviated_commit_hash]
      new_branch = "feature/update_docs_#{last_commit_hash}"

      jazzy
      sh("git checkout -b #{new_branch}")

      sh('git config --global user.email "misc@pay.jp"')
      sh('git config --global user.name "pay kun"')
      git_add
      git_commit(
        path: "./",
        message: "update docs."
      )

      push_to_git_remote(
        remote: 'origin',
        local_branch: new_branch,
        remote_branch: new_branch
      )

      pr_url = create_pull_request(
        repo: 'payjp/payjp-ios-internal',
        base: target_branch,
        title: "update docs:#{last_commit_hash}",
        api_token: ENV['GITHUB_API_TOKEN']
      )

      slack(
        message: ":rocket: PR is created!\n#{pr_url}",
        success: true
      )
    end
  end
end
